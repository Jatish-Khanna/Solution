class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) { return false; }
        
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        if(target < matrix[0][0] || matrix[rows - 1][cols - 1] < target) { return false; }
        
        int rowIndex = binarySearchRow(matrix, target, rows, cols);
        // System.out.println(rowIndex);
        return binarySearchCol(matrix[rowIndex], target, cols);
    }
    
    private int binarySearchRow(int[][] matrix, int target, int rows, int cols) {
        int start = 0;
        int end = rows - 1;
        int mid = start + (end - start) / 2;
        
        while(start <= end) {
            mid = start + (end - start) / 2;
            // System.out.println(mid);
            if(matrix[mid][0] <= target && target <= matrix[mid][cols - 1]) { 
                return mid; 
            }
            else if(matrix[mid][0] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return mid;
    }
    
    private boolean binarySearchCol(int[] rowData, int target, int cols) {
        int start = 0;
        int end = cols - 1;
        int mid = 0;
        
        while(start <= end) {
            mid = start + (end - start) / 2;
            
            if(rowData[mid] == target) { return true; }
            else if(rowData[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return rowData[mid] == target;
    }
}
