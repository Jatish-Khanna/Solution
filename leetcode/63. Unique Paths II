
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0][0] == 1) { return 0; }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
       int[][] dp = new int[m][n];
        
        dp[0][0] = 1;
        for(int row = 1; row < m; row++) {
            if(obstacleGrid[row][0] == 1) { break; }
            dp[row][0] = 1;
        }
        
        
        for(int col = 1; col < n; col++) {
            if(obstacleGrid[0][col] == 1) { break; }
            dp[0][col] = 1;
        }
        
        for(int row = 1; row < m; row++) {
            for(int col = 1; col < n; col++) {
                if(obstacleGrid[row][col] == 0) {
                    dp[row][col] = dp[row - 1][col] + dp[row][col-1];
                }
            }
        }
        // System.out.println(Arrays.deepToString(dp));
        return dp[m-1][n-1];
    }
}
