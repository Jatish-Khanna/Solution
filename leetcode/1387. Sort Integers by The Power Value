class Solution {
    
    private static final int[] POWER_VALUES = new int[1001];
        static {
            for (int i = 1; i < POWER_VALUES.length; i++)
                POWER_VALUES[i] = getPower(i);
        }

    
    public int getKth(int lo, int hi, int k) {
        
        int[] power = new int[hi - lo + 1];
        for(int i = lo, index = 0; i <= hi; i++, index++) {
            power[index] = i;
            // System.out.println(POWER_VALUES[i]);
            // power[index][1] = getPower(i);
        }
        
        return quickSelect(0, power.length - 1, power, k - 1);
        
        // return power[k - 1][0];
    }
    
    private static int getPower(int num) {
        int count = 0;
        while(num != 1) {
            count++;
            if(num % 2 == 0) {
                num /= 2;
            } else {
                num = 3 * num + 1;
            }
        }
        return count;
    }
    
    private int quickSelect(int low, int high, int[] power, int k) {
        
        while(low <= high) {
            int pivot = findPivot(low, high, power);
            // System.out.println(pivot);
            if(pivot < k) {
                low = pivot + 1;
            } else if(pivot > k) {
                high = pivot - 1;
            } else {
                return power[k];
            }
        }
        return -1;
    }
    
    static int findPivot(int lo, int hi, int[] a) {
            final int pivot = lo;
            hi++;
            while (true) {
                while (compare(a[pivot], a[--hi]) < 0);
                while (lo < hi && compare(a[pivot], a[++lo]) > 0);
                if (lo >= hi) break;
                swap(a, lo, hi);
            }
            swap(a, pivot, hi);
            return hi;
        }

        static int compare(int i, int j) {
            int cmp = POWER_VALUES[i] - POWER_VALUES[j];
            return (cmp == 0 ? i - j : cmp);
        }

        static void swap(int[] a, int i, int j) {
            int t = a[i];
            a[i] = a[j];
            a[j] = t;
        }
    
}
