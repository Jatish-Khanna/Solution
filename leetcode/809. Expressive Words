class Solution {
    public int expressiveWords(String S, String[] words) {
        boolean[] f;
        boolean[] s;
        
        char[] ar = S.toCharArray();
        f = hashArray(ar);
        int count = 0;
        for(String word : words) {
            char[] wAr = word.toCharArray();
            s = hashArray(wAr);
            if(equal(f, s)) {
                count += stretch(ar, wAr);
            }
        }
        return count;
    }
    
    private int stretch(char[] f, char[] s) {
        
        if(f.length == 0 && s.length == 0) {
            return 1;
        } else if(f.length == 0 || s.length == 0) {
            return 0;
        }
        
        int ptr1 = 0;
        int ptr2 = 0;
        
        int count1 = 0;
        int count2 = 0;
        
        int start1 = 0;
        int start2 = 0;
        
        // System.out.println(new String(f) + " " + new String(s));
        
        while(ptr1 < f.length && ptr2 < s.length) {
            
            if(f[ptr1] != s[ptr2]) { return 0; }
            count1 = 0;
            count2 = 0;
            start1 = ptr1;
            start2 = ptr2;
            
            while(ptr1 < f.length && f[start1] == f[ptr1]) {
                ptr1++;
                count1++;
            }
            
            
            while(ptr2 < s.length && s[start2] == s[ptr2]) {
                ptr2++;
                count2++;
            }
            
            if((count1 != count2 && count1 < 3) || count1 < count2) { return 0; }
            else if(ptr1 < f.length && ptr2 == s.length) { return 0; }
        }
        return 1;
    }
    
    private boolean[] hashArray(char[] ar) {
        boolean[] f = new boolean[26];
        for(char ch : ar) {
            f[ch - 'a'] = true;
        }
        return f;
    }
    
    private boolean equal(boolean[] f, boolean[] s) {
        
        for(int index = 0; index < f.length; index++) {
            if(f[index] != s[index]) { return false; }
        }
        return true;
    }
}
