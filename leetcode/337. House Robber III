/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public int rob(TreeNode root) {
        if(root == null)  {return 0; }
        int[] values = robHouse(root);
        return Math.max(values[0], values[1]);
    }
    
    private int[] robHouse(TreeNode node) {
        if(node == null) { return new int[]{0,0}; }
        
        int[] left = robHouse(node.left);
        int[] right = robHouse(node.right);
        // Include the node and add excluded values, or exclude the node
        // Make note: while excluding, we can take max of excludes or includes
        return new int[]{left[1] + right[1] + node.val, Math.max(left[0], left[1]) + Math.max(right[0], right[1])};
        // return values;
    }
}
