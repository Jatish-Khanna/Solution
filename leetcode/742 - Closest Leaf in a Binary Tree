class Main
{
    static class Node {
        int val;
        Node left, right;
        Node(int val) {
            this.val = val;
        }
    }
    
	public static void main(String[] args) {
		System.out.println(closestLeaf());
	}
	
	private static int closestLeaf() {
	    Node root = new Node(10); 
        root.left = new Node(12); 
        root.right = new Node(13); 
   
        root.right.left = new Node(14); 
        root.right.right = new Node(15); 
   
        root.right.left.left = new Node(21); 
        root.right.left.right = new Node(22); 
        root.right.right.left = new Node(23); 
        root.right.right.right = new Node(24); 
   
        root.right.left.left.left = new Node(1); 
        root.right.left.left.right = new Node(2); 
        root.right.left.right.left = new Node(3); 
        root.right.left.right.right = new Node(4); 
        root.right.right.left.left = new Node(5); 
        root.right.right.left.right = new Node(6); 
        root.right.right.right.left = new Node(7); 
        root.right.right.right.right = new Node(8); 
        
        closest(root, 10);
        return value;
	}
	
	static int minDistance = Integer.MAX_VALUE;
	static int value;
	
	private static int closest(Node node, int find) {
	    if(node == null) { return -1; }
	    
	    
	    if(node.val == find) {
	       // System.out.println("Here");
	        child(node, 0);
	        return 0;
	    }
	    
	    int left = closest(node.left, find);
	    if(left != -1) {
	        if(node.right != null) {
	            child(node.right, left + 1);
	        } 
	        return left + 1;
	    }
	    
	    int right = closest(node.right, find);
	    if(right != -1) {
	        if(node.left != null) {
	            child(node.left, right + 1);
	        }
	        return right + 1;
	    }
	    return -1;
	} 
	
	
	private static void child(Node node, int distance) {
	    if(node == null) { return; }
	    if(node.left == null && node.right == null) {
	        if(distance < minDistance) {
	            minDistance = distance;
	            value = node.val;
	        }
	        return; 
	    } else if(distance > minDistance) { return; }
	    child(node.left, distance + 1);
	    child(node.right, distance + 1);
	}
}
