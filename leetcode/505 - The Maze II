
 class Main
{
	public static void main(String[] args) {
		System.out.println(maze2());
	}
	
	// This calculates the shortest distance
	// The shortest distance is based on the condition
	// 1. If ball took any direction, it won't stop until it hits wall
	// 2. It will update the direction to any other 
	// Time -  O\big(mn*log(mn)\big)O(mnâˆ—log(mn)).
	// Space - O(n^2)
	
	private static int maze2() {
	    int[][] matrix =    {{0,0,1,0,0},
                            {0,0,0,0,0},
                            {0,0,0,1,0},
                            {1,1,0,1,1},
                            {0,0,0,0,0}};
        int[] start = {0,4};
        int[] end = {4,4};
        
        int[][] dirs = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        int[][] distance = new int[matrix.length][matrix[0].length];
        for(int[] row : distance) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }

        queue.offer(new int[]{start[0], start[1], 0});
        distance[start[0]][start[1]] = 0;
        int[] curr;
        int count = 0;
        int row, col;

        while(!queue.isEmpty()) {
            curr = queue.poll();
            // skip the point as the alread found path is shorter
            
            if(distance[curr[0]][curr[1]] < curr[2]) { continue; }
            for(int[] dir : dirs) {
                row = curr[0] + dir[0];
                col = curr[1] + dir[1];
                // is isInvalid
                count = 0;
                // check bounds
                while(!isInvalid(row, col, matrix)) {
                    //System.out.println(row + " " + col);
                    row += dir[0];
                    col += dir[1];
                    count++;
                }
                row -= dir[0];
                col -= dir[1];
                if(distance[curr[0]][curr[1]] + count < distance[row][col]) {
                    distance[row][col] = distance[curr[0]][curr[1]] + count;
                    queue.offer(new int[]{row, col, distance[row][col]});
                }
            }
        }
        
        return distance[end[0]][end[1]] == Integer.MAX_VALUE ? -1 : distance[end[0]][end[1]];
	}
	
	private static boolean isInvalid(int row, int col, int[][] matrix) {
	    return row < 0 || col < 0 || row >= matrix.length || col >= matrix[0].length
	           || matrix[row][col] == 1;
	}
}
