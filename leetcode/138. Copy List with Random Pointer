/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) { return head; }
        Node current = head;
        Node next;
        // Add dummy nodes
        while(current != null) {
            next = current.next;
            current.next = new Node(current.val);
            current.next.next = next;
            current = next;
        }
        
        // Random pointers updated
        current = head;
        while(current != null) {
            if(current.random != null)
            current.next.random = current.random.next;
            current = current.next.next;
        }
        
        // Separate
        Node copyHead = head.next;
        Node other = copyHead;
        current = head;
        
        while(other.next != null) {
            // System.out.println(current);
            current.next = other.next;
            other.next = current.next.next;
            current = current.next;
            other = other.next;
        }
        current.next = null;
        return copyHead;
        
    }
}
