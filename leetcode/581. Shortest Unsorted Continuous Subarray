class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if(nums.length == 0) {
            return 0;
        }
        
        int start = 1;
        int sortStart = 0;
        int end = nums.length - 2;
        int sortEnd = nums.length - 1;
        while(start < nums.length && nums[start - 1] <= nums[start]) {
            start++;
        }
        sortStart = start - 1;
        // already sorted
        if(sortStart == nums.length - 1) {
            return 0;
        }
        
        while(end >= start && nums[end] <= nums[end + 1]) {
            // start++;
            --end;
        }
        sortEnd = end + 1;
        int min = nums[sortStart];
        int max = nums[sortStart];
        
        while(start <= sortEnd) {
            if(nums[start] < min) {
                min = nums[start];
            } else if(nums[start] > max) {
                max = nums[start];
            }
            start++;
        }
        // System.out.println(sortStart + " " + sortEnd + " " + min + " " + max);
        int l = searchLast(nums, 0, sortStart, min);
        int f = searchFirst(nums, sortEnd, nums.length - 1, max);
        // System.out.println(l + " " + f);
        return f - l + 1;
    }
    
    private int searchLast(int[] nums, int start, int end, int min) {
        int mid = 0;
        
        while(start <= end) {
            mid = start + (end - start )/ 2;
            if((mid == 0 || nums[mid - 1] <= min) && nums[mid] > min) {
                return mid;
            } else if(nums[mid] > min) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return mid;
    }
    
    
    private int searchFirst(int[] nums, int start, int end, int max) {
        int mid = 0;
        
        while(start <= end) {
            mid = start + (end - start )/ 2;
            if((mid == nums.length - 1 || nums[mid + 1] >= max) && nums[mid] < max) {
                return mid;
            } else if(nums[mid] >= max) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return mid;
    }
}
