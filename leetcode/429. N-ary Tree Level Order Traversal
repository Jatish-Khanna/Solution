/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        
        Queue<Node> queue = new LinkedList<>();
        int size;
        List<Integer> list;
        Node node;
        queue.add(root);
        while(!queue.isEmpty()) {
            size = queue.size();
            list = new ArrayList<>();
            while(size-- > 0) {
                node = queue.poll();
                list.add(node.val);
                if(node.children != null) {
                    queue.addAll(node.children);
                }
            }
            result.add(list);
        }
        return result;
    }
}
