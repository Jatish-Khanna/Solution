class Solution {

    // O(N log K) with K space solution

    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        
        if(k <= 0) { return false; }
        TreeSet<Long> elementsInWindow = new TreeSet<>();
        
        Long smallestMax;
        Long largestMin;
        
        for(int index = 0; index < nums.length; index++) {
            smallestMax = elementsInWindow.ceiling((long)nums[index]);
            largestMin = elementsInWindow.floor((long)nums[index]);
            
            if(smallestMax != null && smallestMax - nums[index] <= t) {
                return true;
            } else if(largestMin != null && nums[index] - largestMin <= t) {
                return true;
            }
            
            if(elementsInWindow.size() == k) {
                elementsInWindow.remove((long)nums[index - k]);
            }
            elementsInWindow.add((long)nums[index]);
        }
        return false;
    }


  // O(N2) solution
  
  
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        
        if(k <= 0) {return false;}
        int end; 
        int start;
        int lastIndex = nums.length - 1;
        for(int index = 0; index < nums.length; index++) {
            end = Math.min(index + k, lastIndex);
            start = index + 1;
            while(start <= end) {
                if(Math.abs((long)nums[start] - (long)nums[index]) <= t) {
                    return true;
                }
                start++;
            }
        }
        return false;
    }



}

