class Trie {
    static class TrieNode {
        TrieNode[] node;
        boolean isEnd;
        
        TrieNode() {
            node = new TrieNode[26];
            // isEnd = false;
        }
    }
    /** Initialize your data structure here. */
    TrieNode head;
    public Trie() {
        head = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode current = head;
        for(char ch : word.toCharArray()) {
            if(current.node[ch - 'a'] == null) {
                current.node[ch - 'a'] = new TrieNode();
            }
            current = current.node[ch - 'a'];
        }
        current.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode current = find(word);
        return current != null && current.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        
        return find(prefix) != null;
    }
    
    private TrieNode find(String prefix) {
        TrieNode current = head;
        for(char ch : prefix.toCharArray()) {
            if(current.node[ch - 'a'] == null) {
                return null;
            }
            current = current.node[ch - 'a'];
        }
        return current;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
