class Solution {

// Faster solution and saves more memory
    public double champagneTower(int poured, int qr, int qg) {
        
       double[] row = new double[qr + 1];
        
        row[0] = (double) poured;
        
        for (int i = 1; i <= qr; i++) {
            for (int j = i ; j >=0; j--) {
                row[j] = row[j] > 1 ? (row[j] - 1) / 2.0 : 0;
                if (j > 0) {
                    row[j] += row[j-1] > 1 ? (row[j-1] -1) / 2.0 : 0;
                }
            }
        }
        
        return row[qg] > 1? 1 : row[qg] ;
    }

   // Slower solution and takes more memory
   // Mimics the actual 
    public double champagneTower(int poured, int qr, int qg) {
        
        double[][] dp = new double[qr + 1][qg + 2];
        double top = 0.0;
        dp[0][0] = poured;
        
        for(int row = 0; row < qr; row++) {
            for(int col = 0; col <= qg; col++) {
                top = Math.max(dp[row][col] - 1.0, 0);
                dp[row + 1][col] += top / 2.0;
                dp[row + 1][col + 1] += top / 2.0;
            }
        }
        
        return Math.min(dp[qr][qg], 1.0);
    }
}
