class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        if(nums1.length > nums2.length) { return findMedianSortedArrays(nums2, nums1); }
        
        int m = nums1.length;
        int n = nums2.length;
//         // Base cases
//         if(n == 0) { return -1.0; }
//         else if(m == 0) { 
//           if(n % 2 == 0) {
//               return (nums2[n / 2] + nums2[n / 2 - 1] ) / 2.0; 
//           } else {
//               return nums2[n/2];
//           }
        
//         }
        
        int partX, partY, maxLeftA, maxLeftB, minRightA, minRightB;
        int low = 0;
        int high = m;
        
        int mid = (m + n + 1) / 2;
        
        while(low <= high) {
            partX = low + (high - low) / 2;
            partY = mid - partX;
            
            maxLeftA = partX == 0 ? Integer.MIN_VALUE : nums1[partX - 1];
            minRightA = partX == m ? Integer.MAX_VALUE : nums1[partX];
            
            maxLeftB = partY == 0 ? Integer.MIN_VALUE : nums2[partY - 1];
            minRightB = partY == n ? Integer.MAX_VALUE : nums2[partY];
            
            
            if(maxLeftA <= minRightB && maxLeftB <= minRightA) {
                
                if((m + n) % 2 == 0) {
                    return (double) (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2.0;
                } else {
                    return (double) Math.max(maxLeftA, maxLeftB);
                }
            } else if(maxLeftA > minRightB) {
                high = partX - 1;
            } else {
                low = partX + 1;
            }
        }
        return -1.0;
        
    }
}
