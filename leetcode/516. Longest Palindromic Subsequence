class Solution {

    // Space and time efficient solution for the longest palindrome substring
    public int longestPalindromeSubseq(String s) {
        int length = s.length();
        int[] dp = new int[length];
        
        char[] ar = s.toCharArray();
        int max = 0;
        int len;
        
        for(int right = 0; right < length; right++) {
            dp[right] = 1;
            max = 0;
            for(int left = right - 1; left >= 0; left--) {
                len = dp[left];
                if(ar[left] == ar[right]) {
                    dp[left] = 2 + max;
                }
               max = Math.max(max, len);
            }
        }
        
        for(int value : dp) {
            max = Math.max(value, max);
        }
        return max;
    }



    public int longestPalindromeSubseq(String s) {
        String rev = new StringBuilder(s).reverse().toString();
        char[] original = s.toCharArray();
        char[] reverse = rev.toCharArray();
        
        int[][] dp = new int[original.length + 1][original.length + 1];
        
        for(int index = 1; index <= original.length; index++) {
            for(int second = 1; second <= reverse.length; second++) {
                if(original[index - 1] == reverse[second - 1]) {
                    dp[index][second] = 1 + dp[index - 1][second - 1];
                } else {
                    dp[index][second] = Math.max(dp[index][second - 1], dp[index - 1][second]);
                }
            }
        }
        
        
        return dp[original.length][reverse.length];
    }
}
