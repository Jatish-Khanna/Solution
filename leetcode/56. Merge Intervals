class Solution {
    public int[][] merge(int[][] intervals) {
        
        if(intervals == null || intervals.length == 0) {
            return new int[][]{};
        }
        
        Arrays.sort(intervals, (o1, o2) -> {
           if(o1[0] == o2[0]) {
               return o1[1] - o2[1];
           } 
           return o1[0] - o2[0];
        });
        
        LinkedList<int[]> merged = new LinkedList<>();
        merged.add(intervals[0]);
        int [] last = intervals[0];
        for(int index = 1; index < intervals.length; index++) {
            if(last[1] < intervals[index][0]) {
                merged.add(intervals[index]);
                last = intervals[index];
            } else {
                last[1] = Math.max(last[1], intervals[index][1]);
            }
        }
        
        // merged.stream().forEach(element -> System.out.println(element[0]+" "+element[1]));
        // System.out.println(merged);
        return merged.toArray(new int[merged.size()][2]);
    }
}
