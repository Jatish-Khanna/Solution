/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null) { return null; }
        
        if(root.val < key) {
            root.right = deleteNode(root.right, key);
            return root;
        } else if(root.val > key) {
            root.left = deleteNode(root.left, key);
            return root;
        }
        
        if(root.left == null) { return root.right; }
        else if(root.right == null) { return root.left; }
        
        // having both the left and right of the node to be deleted
        TreeNode left = root.left;
        TreeNode right = root.right;
        TreeNode leftRight = root.left.right;
        
        // Considering the left node as new root and update the right parent 
        left.right = right;
        
        // change parent for left-right leg
        
        while(right.left != null) { right = right.left; }
        right.left = leftRight;
        
        return left;
    }
}
