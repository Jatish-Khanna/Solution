/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    // DFS - Better space and memory usage compared to BFS
    int maxSum = Integer.MIN_VALUE;
    int maxLevel = 1;
    public int maxLevelSum(TreeNode root) {
        int[] level = new int[(int)1e4 + 1];
        dfs(root, 1, level);
        for(int id = 1; id < level.length; id++) {
            if(level[id] > maxSum) {
                maxSum = level[id];
                maxLevel = id;
            }
        }
        return maxLevel;
    }
    
    private void dfs(TreeNode node, int current, int[] level) {
        if(node == null) { return; }
        level[current] += node.val;
        
        dfs(node.left, current + 1, level);
        dfs(node.right, current + 1, level);
    }
    
    
    // BFS - 100% space usage
    public int maxLevelSum(TreeNode root) {
        int maxSum = Integer.MIN_VALUE;
        int maxLevel = 1;
        Queue<TreeNode> queue = new LinkedList<>();
        int size;
        int current;
        TreeNode node;
        int level = 1;
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            size = queue.size();
            current = 0;
            while(size-- > 0) {
                node = queue.poll();
                current += node.val;
                if(node.left  != null) {
                    queue.offer(node.left);
                }
                if(node.right != null) {
                    queue.offer(node.right);
                }
            }
            if(maxSum < current) {
                maxSum = current;
                maxLevel = level;
            }
            level++;
        }
        return maxLevel;
    }
}
