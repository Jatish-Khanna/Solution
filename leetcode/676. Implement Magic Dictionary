class MagicDictionary {
    Trie trie;
    /** Initialize your data structure here. */
    public MagicDictionary() {
        trie = new Trie();
    }
    
    public void buildDict(String[] dictionary) {
        for(String word : dictionary) {
            trie.insert(word);    
        }
        
    }
    
    public boolean search(String searchWord) {
        return trie.searchFuzzy(searchWord);
    }
    
    static class Trie {
        TrieNode root;
        static class TrieNode {
            TrieNode[] children;
            boolean isEnd;
            
            TrieNode() {
                children = new TrieNode[26];
                isEnd = false;
            }
        }
        
        Trie() {
            root = new TrieNode();
        }
        
        void insert(String word) {
            TrieNode current = root;
            for(char ch : word.toCharArray()) {
                if(current.children[ch - 'a'] == null) {
                    current.children[ch - 'a'] = new TrieNode();
                }
                current = current.children[ch - 'a'];
            }
            current.isEnd = true;
        }
        
        // with exactly one change
        public boolean searchFuzzy(String word) {
            TrieNode current = root;
            int depth = 1;
            for(char ch : word.toCharArray()) {
                for(int index = 0; index < current.children.length; index++) {
                    if(current.children[index] == null || (index == ch - 'a')) {
                        continue;
                    }
                    if(search(word.substring(depth), current.children[index])) {
                        return true;
                    }
                }
                depth++;
                if(current.children[ch - 'a'] == null) {
                    return false;
                }
                current = current.children[ch - 'a'];
            }
            return false;
        }
        
        private boolean search(String word, TrieNode current) {
            for(char ch : word.toCharArray()) {
                if(current.children[ch - 'a'] == null) {
                    return false;
                }
                current = current.children[ch - 'a'];
            }
            return current.isEnd;
        }
    }
}

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.buildDict(dictionary);
 * boolean param_2 = obj.search(searchWord);
 */
