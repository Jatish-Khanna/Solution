

class Solution {
    
    /**
        There a a constant solution, 
        the result set can only be in [0...9], 0 can only be generated by 0, 
        so the result set of all positive number is [1...9], 
        each time the number increase by 10, 
        the number that adds up to 9 shift left by 1, 
        say res(18) = 9, res(27) = 9, ... so this question becomes : 
        how many numbers are there between this number and the last res(X) = 9;
        so the question becomes X = 9 * ((num-1)/9) and the final result is num - X;
    */
    
    // Another way
    public int addDigits(int num) {
        return num - 9 * ((num-1)/9);
    }
    
    
    public int addDigits(int num) {
           
         return 1 + (num - 1) % 9;
    }
    
    // Slow solution
     public int addDigits(int num) {
        while(num > 9){
            int res =0;
            while(num > 0){
                res += num%10;
                num /= 10;
            }
            num = res;
        }

        return num;

    }
}
