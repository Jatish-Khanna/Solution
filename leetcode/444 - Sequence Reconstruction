 class Main
{
	public static void main(String[] args) {
		System.out.println(sequenceChecker());
	}
	
	private static boolean sequenceChecker() {
	    int[] orgs = {1,2,3};
	    int[][] seqs = {{1,2}, {1,3}, {2,3}};
	    
	    Map<Integer, Set<Integer>> graph = new HashMap<>();
	    Map<Integer, Integer> indegree = new HashMap<>();
	    
	    for(int element : orgs) {
	        graph.put(element, new HashSet<>());
	        indegree.put(element, 0);
	    }
   
        int n = orgs.length;
	    int count = 0;
	    for(int[] seq : seqs) {
	        if(seq.length == 0) { continue; }
	        count += seq.length;
	        
	        if(seq[0] < 0 || seq[0] > n) {
	            return false;
	        }
	        for(int index = 1; index < seq.length; index++) {
	          if(graph.get(seq[index - 1]).add(seq[index])) {
	              indegree.merge(seq[index], 1, ((o,p) -> o+p));
	          }
	        }
	    }
	    
	    // when the element in the seq are less than the orgs
	    if(count < n) { return false; }
	    
	    Queue<Integer> queue = new LinkedList<>();
	    for(int element : orgs) {
	        if(indegree.get(element) == 0) {
	            queue.add(element);
	        }
	    }
	    count = 0;
	    while(queue.size() == 1) {
	        for(int neb : graph.get(queue.poll())) {
	            indegree.merge(neb, 1, ((o, p) -> o - p));
	            if(indegree.get(neb) == 0) {
	                queue.add(neb);
	            }
	        }
	        count++;
	    }
	    return count  == orgs.length;
	}
}
