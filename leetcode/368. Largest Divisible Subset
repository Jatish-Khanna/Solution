class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.sort(nums);
        Arrays.fill(dp, 1);
        int max = 1;
        // int prev = -1;
        
        for(int i = 1; i < nums.length; i++) {
            for(int j = 0; j < i; j++) {
                
                if(nums[j] * 2 > nums[i]) { break;}
                
                if(nums[i] % nums[j] == 0) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            if(max < dp[i]) {
                // prev = nums[i];
                max = dp[i];
            }
        }
        // System.out.println(max);
        int prev = -1;
        List<Integer> list = new ArrayList<>();
        
        for(int index = nums.length - 1; index >= 0; index--) {
            if(dp[index] == max && (prev == -1 || (prev % nums[index] == 0))) {
                list.add(nums[index]);
                prev = nums[index];
                max--;
            }
        }
        return list;
    }
}
