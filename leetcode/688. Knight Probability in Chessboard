class Solution {
    
    int[] rd = {-2,-2, -1,1, 2,2, -1,1};
    int[] cd = {-1,1, 2,2, -1,1, -2,-2};
    
    public double knightProbability(int N, int K, int r, int c) {
        double[][][] dp = new double[N][N][K+1];
        
        return probability(r, c, K, N, dp) / Math.pow(8,K);
    }
    
    private double probability(int row, int col, int k, int N, double[][][] dp) {
        if(row < 0 || col < 0 || row >= N || col >= N) { return 0.0; }
        else if(k == 0) { return 1; }
        else if(dp[row][col][k] != 0) { return dp[row][col][k]; }
        
        for(int dir = 0; dir < rd.length; dir++) {
            dp[row][col][k] += probability(row + rd[dir], col + cd[dir], k - 1, N, dp);
        }
        
        return dp[row][col][k];
    }
}
