class Solution {
   // Randomized QuickSelect - AverageCase - O(N) 
   // Worst Case - O(N2)

    public int minMoves2(int[] nums) {
        
        int mid = nums[quickSelect(0, nums.length - 1, nums, nums.length / 2)];
        int count  = 0;
        for(int element : nums) {
            count += Math.abs(element - mid);    
        }
        return count;
    }
    
    private int quickSelect(int left, int right, int[] nums, int k) {
        int pivitIndex;
        while(left < right) {
            pivitIndex = partition(left, right, nums);
            if(pivitIndex < k) {
                left = pivitIndex + 1;
            } else if(pivitIndex > k) {
                right = pivitIndex - 1;
            } else {
                return pivitIndex;
            }
        }
        return left;
    }
    
    private int partition(int left, int right, int[] nums) {
        
        // Randomized QuickSelect is much better than simple QuickSelect
        int pivit = nums[(left + right) / 2];
        nums[(left + right) / 2] = nums[left];
        nums[left] = pivit;
        
        // Randomization end
        
        while(left < right) {
            while(left < right && nums[right] > pivit) { right--; }
            nums[left] = nums[right];
            while(left < right && nums[left] <= pivit) { left++; }
            nums[right] = nums[left];
        }
        nums[left] = pivit;
        return left;
    }


   // O(nlogn) - for sorting

    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int mid = nums[nums.length / 2];
        int count  = 0;
        for(int element : nums) {
            count += Math.abs(element - mid);    
        }
        return count;
    }
}
