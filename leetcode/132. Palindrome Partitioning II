class Solution {

  // Optimized solution

    public int minCut(String s) {
        int length = s.length();
        int[] cuts = new int[length];
        char[] ar = s.toCharArray();
        Arrays.fill(cuts, length);
        
        for(int index = 0; index < length; index++) {
            // odd length
            fill(index, index, cuts, ar);
            // even length
            fill(index, index + 1, cuts, ar);
        }
        return cuts[length - 1];
    }
    
    private void fill(int left, int right, int[] cuts, char[] ar) {
        while(left >= 0 && right < cuts.length && ar[left] == ar[right]) {
            cuts[right] = Math.min(cuts[right], left == 0 ? 0 : cuts[left - 1] + 1);
            left--;
            right++;
        }
    }


   // O(N^2) solution

    public int minCut(String s) {
        int length = s.length();
        int[] cuts = new int[length];
        Arrays.fill(cuts, Integer.MAX_VALUE);
        char[] ar = s.toCharArray();
        cuts[0] = 0;
        for(int index = 1; index < length; index++) {
            if(isPalindrome(ar, 0, index)) {
                cuts[index] = 0;
            } else {
                for(int sub = index - 1; sub >= 0; sub--) {
                    if(cuts[sub] != Integer.MAX_VALUE && isPalindrome(ar, sub + 1, index )) {
                        cuts[index] = Math.min(cuts[sub] + 1, cuts[index]);
                        // break;
                    }
                }
            }
        }
        return cuts[length -1];
    }
    
    private boolean isPalindrome(char[] ar, int start, int end) {
        while(start < end) {
            if(ar[start] != ar[end]) { return false; }
            start++;
            end--;
        }
        return true;
    }
}
