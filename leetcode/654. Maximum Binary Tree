/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return build(0, nums.length - 1, nums);
        // return 
    }
    
    private TreeNode build(int start, int end, int[] nums) {
        if(start > end) { return null; }
        else if(start == end) {
            return new TreeNode(nums[start]);
        }
        
        int rid = findMax(start, end, nums);
        TreeNode node = new TreeNode(nums[rid]);
        node.left = build(start, rid - 1, nums);
        node.right = build(rid + 1, end, nums);
        return node;
    }
    
    private int findMax(int start, int end, int[] nums) {
        // int max = nums[start];
        int index = start++;
        while(start <= end) {
            if(nums[index] < nums[start]) {
                index = start;
            }
            start++;
        }
        // System.out.println(index);
        return index;
    }
}
