class Solution {

 // High speed - as uses the limits to process and count

    public int minDominoRotations(int[] A, int[] B) {
        int min = A.length;
        
        for(int i = 1; i <= 6; i++) {
            min = Math.min(min, count(A, B, i));
        }
        
        return min == A.length ? -1 : min;
    }
    
    private int count(int[] A, int[] B, int number) {
        int commons = 0;
        int a = 0;
        int b = 0;
        for(int i = 0; i < A.length; i++) {
            if(A[i] != number && B[i] != number) {
                return A.length;
            } else if(A[i] != B[i]) {
                // commons++;
                if(A[i] == number) {
                    a++;
                } else {
                    b++;
                }
            }
        }
        return Math.min(a, b);
    }

// Slower solution 

    public int minDominoRotations(int[] A, int[] B) {
        int[] ac = new int[7];
        int[] bc = new int[7];
        int[] commons = new int[7];
        
        for(int id = 0; id < A.length; id++) {
            // if(A[id] != B[id]) {
            bc[B[id]]++;
            ac[A[id]]++;
            if(B[id] == A[id]) {
                commons[A[id]]++;
            }
        }
        int min = A.length;
        // Arrays.stream(A).forEach(System.out::println);
        for(int id = 1; id < ac.length; id++) {
            if(ac[id] + bc[id] - commons[id] == A.length) {
                min = Math.min(min, Math.min(ac[id], bc[id]) - commons[id]);
            }
        }
        return min == A.length ? -1 : min;
    }
}
