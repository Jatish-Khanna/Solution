/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

   // Faster Solution interms of CPU cycles - no additional space being used
       public void reorderList(ListNode head) {
        if(head == null || head.next == null) { return ; }
        // Deque<ListNode> stack = new ArrayDeque<>();
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        
        ListNode current = slow.next;
        // Terminate the list
        slow.next = null;
        ListNode prev = null;
        ListNode next;
        // last nodes in reverse
        while(current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        
        merge(head, prev);
    }
    
    private void merge(ListNode first, ListNode second) {
        ListNode nextFirst, nextSecond;
        while(second != null) {
            nextFirst = first.next;
            nextSecond = second.next;
            first.next = second;
            second.next = nextFirst;
            first = nextFirst;
            second = nextSecond;
        }
    
 
    // Slow due to using collections - instead, break at mid, reverse post mid, and merge two list
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) { return ; }
        Deque<ListNode> stack = new ArrayDeque<>();
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode current = slow.next;
        // Terminate the list
        slow.next = null;
        // last nodes in reverse
        while(current != null) {
            stack.push(current);
            current = current.next;
        }
        
        current = head;
        ListNode next;
        ListNode other;
        while(!stack.isEmpty() && current != null) {
            next = current.next;
            current.next = stack.peek();
            stack.pop().next = next;
            current = next;
        }
        
    }
}
