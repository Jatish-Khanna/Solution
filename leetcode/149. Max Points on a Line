class Solution {
    public int maxPoints(int[][] points) {
        if(points.length<=2){
           return points.length;
       }
        Arrays.sort(points, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                if(o1[0]!=o2[0]) return o1[0]-o2[0];
                else return o1[1]-o2[1];
            }
        });
        int maxCount=0;
        for(int i=0;i<points.length;i++){
            int cnt=1;
            // Overlapping
            while(i+1<points.length && points[i][0]==points[i+1][0] && points[i][1]==points[i+1][1]){
                // total overlapping
                cnt++;
                i++;
            }
            // update max count
            maxCount = Math.max(maxCount,cnt);
            
            // now start with the points
            for(int j=i+1;j<points.length;j++){
                int count = cnt+1;
                long dx = points[j][0]-points[i][0];
                long dy = points[j][1]-points[i][1];
                for(int k=j+1;k<points.length;k++){
                    long dx1 = points[k][0]-points[i][0];
                    long dy1 = points[k][1]-points[i][1];
                    if(dy1*dx == dx1*dy) count++;
                }
                maxCount = Math.max(maxCount,count);
            }
        }
        return maxCount;
    }
}
